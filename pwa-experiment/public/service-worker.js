// service-worker.js
// intercept network requests and serve up cached files
// allows app to work offline

// Set true for production
var doCache = true;

// name cache
var CACHE_NAME = 'val-pwa-cache-v1';

// delete old cahces that are not our current one
self.addEventListener("activate", event => {
  const cacheWhiteList = [CACHE_NAME];
  event.waitUntil(
    caches.keys()
    .then(keyList => Promise.all(keyList.map(key => {
      if (!cacheWhiteList.includes(key)) {
        console.log('Deleting cahce: ' + key);
        return caches.delete(key);
      }
    })))
  );
});

// install triggered first time user starts the PWA
self.addEventListener('install', function(event) {
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME)
      .then(function(cache) {
        // get assets manifest to see name of js file
        // webpack hashes it
        fetch("asset-manifest.json")
        .then(response => {
          response.json();
        })
        .then(assets => {
          // open cache
          // cache page and main.js generated by webpack
          // can also cache any static assets like CSS or images
          const urlsToCache = [
            "/",
            '/index.html',
            '/index.html?homescreen=1',
            '/?homescreen=1',
            assets["main.js"]
          ]
          cache.addAll(urlsToCache);
          console.log('cached');
        })
      })
    );
  }
});

// when page fetches files, we intercept the request
// and serve matching files if we have them

self.addEventListener('fetch', function(event) {
  if (doCache) {
    event.respondWith(
      caches.match(event.request).then(function(response) {
        return response || fetch(event.request);
      })
    );
  }
});